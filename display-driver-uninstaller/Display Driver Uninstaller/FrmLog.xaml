<Window x:Class="Display_Driver_Uninstaller.FrmLog" x:Name="frmLog"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:Display_Driver_Uninstaller"
	xmlns:conv="clr-namespace:Display_Driver_Uninstaller.Converters"
	Title="Log" MinHeight="480" MinWidth="600" >

	<Window.Resources>
		<Color x:Key="cNormal">Black</Color>
		<Color x:Key="cValue">#FF0000D2</Color>
		<Color x:Key="cWarning">Black</Color>
		<Color x:Key="cError">Red</Color>
		<Color x:Key="cSelected">#FFCBCBCB</Color>

		<SolidColorBrush x:Key="bNormal" Color="{StaticResource cNormal}"/>
		<SolidColorBrush x:Key="bValue" Color="{StaticResource cValue}"/>
		<SolidColorBrush x:Key="bWarning" Color="{StaticResource cWarning}"/>
		<SolidColorBrush x:Key="bError" Color="{StaticResource cError}"/>
		<SolidColorBrush x:Key="bSelected" Color="{StaticResource cSelected}" />

		<Style x:Key="styleNormal" TargetType="{x:Type TextBlock}">
			<Setter Property="Foreground" Value="{StaticResource bNormal}"/>
			<Setter Property="FontWeight" Value="Bold"/>
			<Setter Property="FontSize" Value="12"/>
		</Style>
		<Style x:Key="styleValue" TargetType="{x:Type TextBlock}">
			<Setter Property="Foreground" Value="{DynamicResource bValue}"/>
			<Setter Property="FontWeight" Value="Normal"/>
			<Setter Property="FontSize" Value="12"/>
		</Style>

		<LinearGradientBrush x:Key="bgBrushEvent" EndPoint="1,0.5" StartPoint="0,0.5" >
			<GradientStop Color="#FFBEC8FF" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="bgBrushWarning" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="#FFFFFFB4" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="bgBrushError" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="#FFFFE6E6" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>

		<conv:NullableBooleanToBoolean x:Key="NulBoolToBool"></conv:NullableBooleanToBoolean>
		<conv:BooleanToVisibilityConverter x:Key="BoolToVisibility" Reversed="False" TrueValue="Visible" FalseValue="Collapsed" />
		<conv:BooleanToVisibilityConverter x:Key="NotBoolToVisibility" Reversed="False" TrueValue="Collapsed" FalseValue="Visible" />
		<conv:BooleanToColor x:Key="BoolToColor" Reversed="False" TrueValue="{StaticResource cValue}" FalseValue="{StaticResource cNormal}"/>
		<conv:BooleanToFontWeight x:Key="BoolToBold" Reversed="False" TrueValue="Normal" FalseValue="Bold"/>
		<conv:BooleanToStyle x:Key="BoolToStyle" Reversed="False" TrueValue="{StaticResource styleNormal}" FalseValue="{StaticResource styleValue}"/>
		<conv:BooleanToStyle x:Key="NotBoolToStyle" Reversed="True" TrueValue="{StaticResource styleNormal}" FalseValue="{StaticResource styleValue}"/>

		<conv:LogTypeToBrush x:Key="TypeToBrush" Brush1="{StaticResource bValue}" Brush2="{StaticResource bWarning}" Brush3="{StaticResource bError}"/>
		<conv:LogTypeToBrush x:Key="TypeToBrushBg" Brush1="{StaticResource bgBrushEvent}" Brush2="{StaticResource bgBrushWarning}" Brush3="{StaticResource bgBrushError}"/>

		<conv:StringIsNotNullOrEmpty x:Key="NullOrEmpty" Reversed="True" />
		<conv:CombiningConverter x:Key="NullToVis" Converter1="{StaticResource NullOrEmpty}" Converter2="{StaticResource BoolToVisibility}" />

		<ControlTemplate x:Key="logTitle" TargetType="{x:Type Control}">
			<Grid Margin="5">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>

				<Grid.Resources>
					<Style TargetType="{x:Type TextBlock}" >

						<Setter Property="Foreground" Value="Black" />
					</Style>
				</Grid.Resources>

				<TextBlock>
					<TextBlock Grid.Row="0" 
							   Grid.Column="0" 
							   VerticalAlignment="Center" 
							   Foreground="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrush}, UpdateSourceTrigger=PropertyChanged}" 
							   FontWeight="Bold" >
						<TextBlock.Text>
							<MultiBinding StringFormat="[ {0} - {1} ]" Mode="OneWay">
								<Binding Path="ID" Mode="OneWay" UpdateSourceTrigger="PropertyChanged" />
								<Binding Path="Type" Mode="OneWay" UpdateSourceTrigger="PropertyChanged" />
							</MultiBinding>
						</TextBlock.Text>
					</TextBlock>
				

				</TextBlock>

				<TextBlock Margin="10,0,0,0" 
						   Grid.RowSpan="2"
						   Grid.Column="1" 
						   FontWeight="SemiBold" 
						   FontSize="14" 
						   Foreground="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrush}, UpdateSourceTrigger=PropertyChanged}" 
						   Text="{Binding Message, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" />

				<TextBlock Grid.Row="1" 
						   Grid.Column="0" 
						   Grid.ColumnSpan="1" 
						   Foreground="Black" 
						   Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}" />
			</Grid>
		</ControlTemplate>

		<DataTemplate x:Key="logException" DataType="{x:Type local:LogEntry}">
			<StackPanel>
				<TextBlock Style="{StaticResource styleNormal}" Text="{Binding Key, UpdateSourceTrigger=PropertyChanged}" />
				<TextBlock Style="{StaticResource styleValue}" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap"/>
				<TextBlock/>
			</StackPanel>
		</DataTemplate>

		<DataTemplate x:Key="logValues" DataType="{x:Type local:LogEntry}">
			<Grid Visibility="{Binding HasAnyValue, Mode=OneWay, Converter={StaticResource NullToVis}, UpdateSourceTrigger=PropertyChanged}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>

				<TextBlock	Grid.Column="0" Visibility="{Binding HasKey, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}"
							Style="{Binding HasKey, Mode=OneWay, Converter={StaticResource BoolToStyle},UpdateSourceTrigger=PropertyChanged}">
					<TextBlock.Text>
						<MultiBinding StringFormat="{}{0}{1}" Mode="OneWay">
							<Binding Path="Key" Mode="OneWay" UpdateSourceTrigger="PropertyChanged" />
							<Binding Path="Separator" Mode="OneWay" UpdateSourceTrigger="PropertyChanged" />
						</MultiBinding>
					</TextBlock.Text>
				</TextBlock>

				<TextBlock Grid.Column="1" 
					Style="{Binding HasKey, Mode=OneWay, Converter={StaticResource NotBoolToStyle},UpdateSourceTrigger=PropertyChanged}" 
					Text="{Binding Value, Mode=OneWay}" TextWrapping="Wrap" />
			</Grid>
		</DataTemplate>

		<DataTemplate x:Key="logItem" >
			<Border BorderThickness="0.5" 
					BorderBrush="Black">
				<Border.Style>
					<Style TargetType="{x:Type Border}">
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsSelected}" Value="True">
								<Setter Property="Background" Value="{StaticResource bSelected}" />
							</DataTrigger>
							<DataTrigger Binding="{Binding IsSelected}" Value="False">
								<Setter Property="Background" Value="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrushBg}, UpdateSourceTrigger=PropertyChanged}" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Border.Style>
				<ContentControl Template="{StaticResource logTitle}" />
			</Border>
		</DataTemplate>

		<ContextMenu x:Key="cmMessage">
			<MenuItem x:Name="copyMessage" Header="Copy Message" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
		</ContextMenu>
		<ContextMenu x:Key="cmValues">
			<MenuItem x:Name="copyValValue" Header="Copy Value(s)" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyValue}"/>
			<MenuItem x:Name="copyValLine" Header="Copy Line(s)" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
		</ContextMenu>
		<ContextMenu x:Key="cmException">
			<MenuItem x:Name="copyExKey" Header="Copy Key(s)" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyKey}"/>
			<MenuItem x:Name="copyExValue" Header="Copy Value(s)" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyValue}"/>
			<MenuItem x:Name="copyExLine" Header="Copy Line(s)" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
		</ContextMenu>

		<Style x:Key="styleCMLog" TargetType="{x:Type ListBox}">
			<Setter Property="ContextMenu" Value="{StaticResource cmMessage}" />		
			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=frmLog, Path=EnableCopy}" Value="False">
					<Setter Property="ContextMenu" Value="{x:Null}" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="styleCMValues" TargetType="{x:Type ListBox}">
			<Setter Property="ContextMenu" Value="{StaticResource cmValues}" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=frmLog, Path=EnableCopy}" Value="False">
					<Setter Property="ContextMenu" Value="{x:Null}" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="styleCMException" TargetType="{x:Type ListBox}">
			<Setter Property="ContextMenu" Value="{StaticResource cmException}" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=frmLog, Path=EnableCopy}" Value="False">
					<Setter Property="ContextMenu" Value="{x:Null}" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</Window.Resources>

	<Grid x:Name="gridRoot">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*"  MinHeight="100"/>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*"  MinHeight="100" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>

		<Menu Grid.Row="0" FontSize="14" Background="#FFE6E6E6">
			<MenuItem x:Name="filtersMenuItem" Header="Filters">
				<MenuItem x:Name="eventsMenuItem" Header="Show Events" IsCheckable="True" IsChecked="{Binding ElementName=frmLog, Path=ListEvents, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
				<MenuItem x:Name="warningsMenuItem" Header="Show Warnings" IsCheckable="True" IsChecked="{Binding ElementName=frmLog, Path=ListWarnings, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
				<MenuItem x:Name="errorsMenuItem" Header="Show Errors" IsCheckable="True" IsChecked="{Binding ElementName=frmLog, Path=ListErrors, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
			</MenuItem>

			<MenuItem x:Name="optionsMenuItem" Header="Options">
				<MenuItem x:Name="copyMenuItem" Header="Copy Enabled" IsCheckable="True" IsChecked="{Binding ElementName=frmLog, Path=EnableCopy, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
			</MenuItem>	
		</Menu>

		<ListBox Name="lbLog"
				 Grid.Row="1"
				 DataContext="{Binding Log.LogEntries, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
				 ItemsSource="{Binding}" 
				 HorizontalContentAlignment="Stretch" 
				 BorderThickness="0"
				 Focusable="False"
				 Style="{StaticResource styleCMLog}"
				 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
				 ScrollViewer.VerticalScrollBarVisibility="Visible" 
				 ScrollViewer.IsDeferredScrollingEnabled="False"
				 ScrollViewer.CanContentScroll="True"
				 VirtualizingStackPanel.IsVirtualizing="True"
				 VirtualizingStackPanel.VirtualizationMode="Recycling"
				 ItemTemplate="{StaticResource logItem}">

			<ListBox.CommandBindings>
				<CommandBinding Command="Copy" Executed="CopyCommand" />
			</ListBox.CommandBindings>
			<ListBox.InputBindings>
				<KeyBinding Key="C" Modifiers="Control" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
			</ListBox.InputBindings>

			<ListBox.ItemContainerStyle>
				<Style TargetType="{x:Type Control}" >
					<Setter Property="Focusable" Value="True" />
				</Style>
			</ListBox.ItemContainerStyle>
		</ListBox>

		<GridSplitter Margin="0,0,0,0" Grid.Row="2" ResizeDirection="Rows" ShowsPreview="True" HorizontalAlignment="Stretch" Background="Black" MinHeight="2" />

		<Border Grid.Row="3" 
				DataContext="{Binding ElementName=frmLog, Path=SelectedEntry, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
				Background="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrushBg}, UpdateSourceTrigger=PropertyChanged}"
				BorderThickness="1" 
				BorderBrush="Black">

			<TabControl Background="{x:Null}" 
						Grid.Row="1"
						Name="tabControl">	
				<TabItem Header="[ Exception ]" 
						 x:Name="tabEx"
						 Visibility="{Binding Path=HasException, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}" 
						 Background="{x:Null}">

					<ListBox 
						Name="lbException"
						Style="{StaticResource styleCMValues}"
						ScrollViewer.HorizontalScrollBarVisibility="Disabled"
						ScrollViewer.VerticalScrollBarVisibility="Visible"
						ScrollViewer.CanContentScroll="True"
						VirtualizingStackPanel.IsVirtualizing="True"
						VirtualizingStackPanel.VirtualizationMode="Recycling"
						SelectionMode="Extended"
						ItemsSource="{Binding ExceptionData, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
						ItemTemplate="{StaticResource logException}" Background="{x:Null}">

						<ListBox.CommandBindings>
							<CommandBinding Command="Copy" Executed="CopyCommand" />
						</ListBox.CommandBindings>
						<ListBox.InputBindings>
							<KeyBinding Key="C" Modifiers="Control" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
						</ListBox.InputBindings>

						<ListBox.ItemContainerStyle>		
							<Style TargetType="{x:Type Control}" >
								<Setter Property="Focusable" Value="{Binding ElementName=frmLog, Path=EnableCopy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
							</Style>
						</ListBox.ItemContainerStyle>
					</ListBox>
				</TabItem>

				<TabItem Header="[ Values ]" 
						x:Name="tabValues"
						Visibility="{Binding Path=HasValues, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}" 
						Background="{x:Null}">

					<ListBox 
						Name="lbValues"
						Style="{StaticResource styleCMException}"
						ScrollViewer.HorizontalScrollBarVisibility="Disabled"
						ScrollViewer.VerticalScrollBarVisibility="Visible"
						ScrollViewer.CanContentScroll="True"
						VirtualizingStackPanel.IsVirtualizing="True"
						VirtualizingStackPanel.VirtualizationMode="Recycling"
						SelectionMode="Extended"
						ItemsSource="{Binding Values, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
						ItemTemplate="{StaticResource logValues}" Background="{x:Null}">

						<ListBox.CommandBindings>
							<CommandBinding Command="Copy" Executed="CopyCommand" />
						</ListBox.CommandBindings>
						<ListBox.InputBindings>
							<KeyBinding Key="C" Modifiers="Control" Command="Copy" CommandParameter="{x:Static local:CopyOption.CopyLine}"/>
						</ListBox.InputBindings>

						<ListBox.ItemContainerStyle>
							<Style TargetType="{x:Type Control}" >
								<Setter Property="Focusable" Value="{Binding ElementName=frmLog, Path=EnableCopy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
							</Style>
						</ListBox.ItemContainerStyle>
					</ListBox>
				</TabItem>

				<TabItem Header="[ No data ]" 
						 x:Name="tabNoData"
						 Visibility="{Binding HasAnyData, Mode=OneWay, Converter={StaticResource NotBoolToVisibility},ConverterParameter=True, UpdateSourceTrigger=PropertyChanged}" 
						 Background="{x:Null}">
					<TextBlock Text="&lt; No Data &gt;" FontSize="28" VerticalAlignment="Center" HorizontalAlignment="Center"/>
				</TabItem>
			</TabControl>
		</Border>

		<Border Grid.Row="4" BorderThickness="0,1,0,0" BorderBrush="Black">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<Button Grid.Column="0" Grid.ColumnSpan="1" Margin="10" Content="Open Log" Grid.Row="1" Height="30" Name="btnOpenLog" VerticalAlignment="Top" MinWidth="80" />
				<TextBlock Grid.Column="1" Grid.ColumnSpan="1" TextWrapping="Wrap" Name="tbOpenedLog" Visibility="Visible" VerticalAlignment="Center" FontWeight="Bold" Margin="10" />

				<StackPanel Orientation="Horizontal" FlowDirection="RightToLeft" Grid.Column="2" Grid.ColumnSpan="1">
					<Button Margin="10" Content="Close" Grid.Row="1" Name="btnClose" HorizontalAlignment="Right" MinWidth="80" Height="30" />
				</StackPanel>
			</Grid>
		</Border>
	</Grid>
</Window>
